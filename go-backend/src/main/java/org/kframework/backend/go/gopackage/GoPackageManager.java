// Copyright (c) 2015-2019 K Team. All Rights Reserved.
package org.kframework.backend.go.gopackage;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.kframework.backend.go.GoOptions;
import org.kframework.backend.go.strings.GoStringUtil;
import org.kframework.utils.errorsystem.KEMException;
import org.kframework.utils.file.FileUtil;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class GoPackageManager {

    private final FileUtil files;
    private final Path goSrcPath;
    public final GoPackage koreParserPackage;
    public final GoPackage interpreterPackage;
    public final GoPackage modelPackage;

    public final String goGeneratedFileComment;
    public final String goNonGeneratedFileComment;

    public GoPackageManager(
            FileUtil files,
            String languageName,
            GoOptions options) {

        this.files = files;
        final String packageNameBase = GoStringUtil.packageName(languageName);

        // retrieve GOPATH
        if (options.goSrcPath == null) {
            throw KEMException.criticalError("Option --go-src-path is required. It should point to $GOPATH/src/");
        }

        try {
            goSrcPath = new File(options.goSrcPath).getCanonicalFile().toPath();

            // TODO: make package output path configurable
            this.koreParserPackage = packageFromRelativePath("koreparser", "./koreparser");

            String modelPackageName = packageNameBase + "model";
            this.modelPackage = packageFromRelativePath(modelPackageName, "./" + modelPackageName);
            this.modelPackage.setAlias("m");

            String interpreterPackageName = packageNameBase + "interpreter";
            this.interpreterPackage = packageFromRelativePath(interpreterPackageName, "./" + interpreterPackageName);
        } catch (IOException e) {
            throw KEMException.criticalError("Failed to initialize GoPackageManager, error: " + e.getMessage(), e);
        }

        String timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date());
        goGeneratedFileComment = "// File generated by the K Framework Go backend. Timestamp: " + timeStamp;
        goNonGeneratedFileComment = "// File provided by the K Framework Go backend. Timestamp: " + timeStamp;
    }

    public GoPackage packageFromRelativePath(String pkgName, String relativePath) {
        try {
            Path absPath = files.resolveKompiled("./" + relativePath).getCanonicalFile().toPath();
            Path relPath = goSrcPath.relativize(absPath);
            String goPath = relPath.toString();
            return new GoPackage(pkgName, goPath, relativePath);
        } catch (IOException e) {
            throw KEMException.criticalError("Failed to initialize GoPackage, error computing relative paths: " + e.getMessage(), e);
        }
    }

    public GoPackage packageFromGoPath(String goPath) {
        String pkgName = new File(goPath).getName().toLowerCase();
        return new GoPackage(pkgName, goPath, null);
    }

    public void saveToPackage(GoPackage pkg, String fileName, String contents) throws IOException {
        files.saveToKompiled(
                pkg.getRelativePath() + "/" + fileName,
                contents);
    }

    public void copyFileToPackage(File srcFile, GoPackage pkg, String fileName) throws IOException {
        copyFileAndReplaceGoPackages(
                srcFile,
                files.resolveKompiled(pkg.getRelativePath() + "/" + fileName),
                pkg);
    }

    private static final String GO_COMMENT = "COMMENT"; // pattern: %COMMENT%
    private static final String PACKAGE = "PACKAGE"; // pattern: %PACKAGE%
    private static final String INCLUDE_INTERPRETER = "INCLUDE_INTERPRETER"; // ...
    private static final String INCLUDE_MODEL = "INCLUDE_MODEL";
    private static final String PACKAGE_PARSER = "PACKAGE_PARSER";
    private static final String INCLUDE_PARSER = "INCLUDE_PARSER";

    public void copyFileAndReplaceGoPackages(File srcFile, File destFile, GoPackage pkg) throws IOException {
        // the replacement patterns
        Map<String,String> tokens = new HashMap<>();
        tokens.put(GO_COMMENT, goNonGeneratedFileComment);
        if (pkg != null) {
            tokens.put(PACKAGE, pkg.getName());
        }
        tokens.put(INCLUDE_INTERPRETER, interpreterPackage.getGoPath());
        tokens.put(INCLUDE_MODEL, modelPackage.getGoPath());
        tokens.put(PACKAGE_PARSER, koreParserPackage.getName());
        tokens.put(INCLUDE_PARSER, koreParserPackage.getGoPath());

        String contents = FileUtils.readFileToString(srcFile);

        // Create pattern of the format "%(COMMENT|PACKAGE_INTERPRETER|...)%"
        String patternString = "%(" + StringUtils.join(tokens.keySet(), "|") + ")%";
        Pattern pattern = Pattern.compile(patternString);
        Matcher matcher = pattern.matcher(contents);

        StringBuffer sb = new StringBuffer();
        while(matcher.find()) {
            matcher.appendReplacement(sb, tokens.get(matcher.group(1)));
        }
        matcher.appendTail(sb);

        FileUtil.save(destFile, sb.toString());
    }

}
